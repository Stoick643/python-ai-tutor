{
  "topic_id": "functions",
  "title": "Functions and Code Organization", 
  "description": "Learn to create reusable code with functions, parameters, return values, and scope",
  "difficulty": 4,
  "estimated_time": 35,
  "prerequisites": ["conditionals", "lists", "loops", "dictionaries"],
  "levels": {
    "0": {
      "type": "concept",
      "content": "Functions are reusable blocks of code that perform specific tasks. Think of them as mini-programs within your program. They help organize code, reduce repetition, and make complex programs manageable. Functions can accept inputs (parameters), process data, and return outputs. They're essential for writing clean, maintainable code.",
      "explanation": "Functions are defined with the 'def' keyword, followed by a name, parentheses for parameters, and a colon. The function body is indented. Use 'return' to send values back to the caller. Functions have their own scope - variables inside functions don't interfere with variables outside.",
      "key_concepts": ["def keyword", "Function parameters", "return statement", "Function scope", "Code reusability", "DRY principle (Don't Repeat Yourself)"]
    },
    "1": {
      "type": "simple_example",
      "content": "Let's start with basic function definition and calling:",
      "code": "# Define a simple greeting function\ndef greet_user(name):\n    \"\"\"Function to greet a user by name.\"\"\"\n    message = f\"Hello, {name}! Welcome to Python!\"\n    return message\n\n# Define a function with multiple parameters\ndef calculate_area(length, width):\n    \"\"\"Calculate the area of a rectangle.\"\"\"\n    area = length * width\n    return area\n\n# Call the functions\ngreeting = greet_user(\"Alice\")\nprint(greeting)\n\nroom_area = calculate_area(12, 8)\nprint(f\"Room area: {room_area} square feet\")\n\n# Function without return (returns None)\ndef print_separator():\n    \"\"\"Print a decorative separator.\"\"\"\n    print(\"-\" * 30)\n\nprint_separator()\nprint(\"Functions make code organized!\")\nprint_separator()",
      "output": "Hello, Alice! Welcome to Python!\nRoom area: 96 square feet\n------------------------------\nFunctions make code organized!\n------------------------------",
      "explanation": "We define functions with 'def', give them descriptive names, and specify parameters in parentheses. The docstring (triple quotes) documents what the function does. Functions can return values or perform actions. When called, functions execute their code with the provided arguments.",
      "key_concepts": ["def keyword", "Function parameters", "return values", "Function docstrings", "Function calls"]
    },
    "2": {
      "type": "medium_example",
      "content": "Now let's explore default parameters, variable scope, and functions working with collections:",
      "code": "# Function with default parameters\ndef create_user_profile(name, age, city=\"Unknown\", active=True):\n    \"\"\"Create a user profile with default values.\"\"\"\n    profile = {\n        \"name\": name,\n        \"age\": age,\n        \"city\": city,\n        \"active\": active,\n        \"created_at\": \"2024-01-15\"  # Local variable\n    }\n    return profile\n\n# Function that processes a list\ndef analyze_scores(scores):\n    \"\"\"Analyze a list of test scores.\"\"\"\n    if not scores:  # Check for empty list\n        return \"No scores to analyze\"\n    \n    total = sum(scores)\n    average = total / len(scores)\n    highest = max(scores)\n    lowest = min(scores)\n    passing = [score for score in scores if score >= 70]\n    \n    # Return multiple values as a dictionary\n    return {\n        \"count\": len(scores),\n        \"average\": round(average, 1),\n        \"highest\": highest,\n        \"lowest\": lowest,\n        \"passing_count\": len(passing),\n        \"pass_rate\": round(len(passing) / len(scores) * 100, 1)\n    }\n\n# Demonstrate scope\nglobal_var = \"I'm global\"\n\ndef scope_demo():\n    local_var = \"I'm local\"\n    print(f\"Inside function: {global_var}\")\n    print(f\"Inside function: {local_var}\")\n\n# Test the functions\nprint(\"👤 User Profiles:\")\nuser1 = create_user_profile(\"Bob\", 25)\nuser2 = create_user_profile(\"Carol\", 30, \"New York\", False)\n\nfor user in [user1, user2]:\n    print(f\"  {user['name']}, {user['age']}, {user['city']}, Active: {user['active']}\")\n\nprint(\"\\n📊 Score Analysis:\")\ntest_scores = [85, 92, 67, 78, 96, 73, 89]\nresults = analyze_scores(test_scores)\n\nprint(f\"  Students tested: {results['count']}\")\nprint(f\"  Class average: {results['average']}\")\nprint(f\"  Range: {results['lowest']} - {results['highest']}\")\nprint(f\"  Pass rate: {results['pass_rate']}% ({results['passing_count']} students)\")\n\nprint(\"\\n🔍 Variable Scope:\")\nscope_demo()\nprint(f\"Outside function: {global_var}\")\n# print(local_var)  # This would cause an error!",
      "output": "👤 User Profiles:\n  Bob, 25, Unknown, Active: True\n  Carol, 30, New York, Active: False\n\n📊 Score Analysis:\n  Students tested: 7\n  Class average: 82.9\n  Range: 67 - 96\n  Pass rate: 85.7% (6 students)\n\n🔍 Variable Scope:\nInside function: I'm global\nInside function: I'm local\nOutside function: I'm global",
      "explanation": "Default parameters provide fallback values when arguments aren't provided. Functions can return complex data structures like dictionaries. Scope determines where variables are accessible - local variables exist only within functions, while global variables are accessible everywhere. List comprehensions work great inside functions.",
      "key_concepts": ["Default parameters", "Returning complex data types", "Variable scope (local vs global)", "Empty list checking", "List comprehensions in functions"]
    },
    "3": {
      "type": "complex_example",
      "content": "Here's a comprehensive library system using multiple interconnected functions:",
      "code": "# Library Management System with Functions\n\ndef create_book(title, author, year, isbn, genre=\"General\"):\n    \"\"\"Create a book dictionary with validation.\"\"\"\n    if not title or not author:\n        return None\n    \n    return {\n        \"title\": title.title(),\n        \"author\": author.title(),\n        \"year\": year,\n        \"isbn\": isbn,\n        \"genre\": genre.title(),\n        \"borrowed\": False,\n        \"borrower\": None,\n        \"times_borrowed\": 0\n    }\n\ndef add_book_to_library(library, book):\n    \"\"\"Add a book to the library catalog.\"\"\"\n    if book and book[\"isbn\"] not in library:\n        library[book[\"isbn\"]] = book\n        return True\n    return False\n\ndef search_books(library, search_term, search_type=\"title\"):\n    \"\"\"Search for books by title, author, or genre.\"\"\"\n    search_term = search_term.lower()\n    results = []\n    \n    for isbn, book in library.items():\n        if search_type == \"title\" and search_term in book[\"title\"].lower():\n            results.append(book)\n        elif search_type == \"author\" and search_term in book[\"author\"].lower():\n            results.append(book)\n        elif search_type == \"genre\" and search_term in book[\"genre\"].lower():\n            results.append(book)\n    \n    return results\n\ndef borrow_book(library, isbn, borrower_name):\n    \"\"\"Borrow a book from the library.\"\"\"\n    if isbn in library:\n        book = library[isbn]\n        if not book[\"borrowed\"]:\n            book[\"borrowed\"] = True\n            book[\"borrower\"] = borrower_name\n            book[\"times_borrowed\"] += 1\n            return f\"📚 '{book['title']}' borrowed by {borrower_name}\"\n        else:\n            return f\"❌ '{book['title']}' is already borrowed by {book['borrower']}\"\n    return \"❌ Book not found\"\n\ndef return_book(library, isbn):\n    \"\"\"Return a borrowed book to the library.\"\"\"\n    if isbn in library:\n        book = library[isbn]\n        if book[\"borrowed\"]:\n            borrower = book[\"borrower\"]\n            book[\"borrowed\"] = False\n            book[\"borrower\"] = None\n            return f\"📖 '{book['title']}' returned by {borrower}\"\n        else:\n            return f\"ℹ️ '{book['title']}' was not borrowed\"\n    return \"❌ Book not found\"\n\ndef get_library_stats(library):\n    \"\"\"Generate comprehensive library statistics.\"\"\"\n    if not library:\n        return {\"total_books\": 0}\n    \n    total_books = len(library)\n    borrowed_books = sum(1 for book in library.values() if book[\"borrowed\"])\n    available_books = total_books - borrowed_books\n    \n    # Genre distribution\n    genres = {}\n    for book in library.values():\n        genre = book[\"genre\"]\n        genres[genre] = genres.get(genre, 0) + 1\n    \n    # Popular books (borrowed most)\n    popular_books = sorted(\n        library.values(), \n        key=lambda x: x[\"times_borrowed\"], \n        reverse=True\n    )[:3]\n    \n    return {\n        \"total_books\": total_books,\n        \"available\": available_books,\n        \"borrowed\": borrowed_books,\n        \"borrowing_rate\": round((borrowed_books / total_books) * 100, 1) if total_books > 0 else 0,\n        \"genres\": genres,\n        \"popular_books\": popular_books\n    }\n\ndef print_library_report(library):\n    \"\"\"Print a formatted library report.\"\"\"\n    stats = get_library_stats(library)\n    \n    print(\"📚 LIBRARY MANAGEMENT REPORT\")\n    print(\"=\" * 50)\n    print(f\"Total Books: {stats['total_books']}\")\n    print(f\"Available: {stats['available']} | Borrowed: {stats['borrowed']}\")\n    print(f\"Borrowing Rate: {stats['borrowing_rate']}%\")\n    \n    if stats[\"genres\"]:\n        print(\"\\n📊 Genre Distribution:\")\n        for genre, count in sorted(stats[\"genres\"].items()):\n            print(f\"  {genre}: {count} books\")\n    \n    if stats[\"popular_books\"]:\n        print(\"\\n🏆 Most Popular Books:\")\n        for i, book in enumerate(stats[\"popular_books\"], 1):\n            if book[\"times_borrowed\"] > 0:\n                print(f\"  {i}. {book['title']} - borrowed {book['times_borrowed']} times\")\n\n# Initialize library and add books\nlibrary_catalog = {}\n\nbooks_to_add = [\n    (\"1984\", \"George Orwell\", 1949, \"978-0-452-28423-4\", \"Dystopian\"),\n    (\"Pride and Prejudice\", \"Jane Austen\", 1813, \"978-0-14-143951-8\", \"Romance\"),\n    (\"The Hobbit\", \"J.R.R. Tolkien\", 1937, \"978-0-547-92822-7\", \"Fantasy\"),\n    (\"Clean Code\", \"Robert Martin\", 2008, \"978-0-13-235088-4\", \"Technical\")\n]\n\nprint(\"📚 Building Library Catalog...\")\nfor title, author, year, isbn, genre in books_to_add:\n    book = create_book(title, author, year, isbn, genre)\n    if add_book_to_library(library_catalog, book):\n        print(f\"  ✅ Added: {book['title']} by {book['author']}\")\n\nprint(\"\\n🔍 Library Operations:\")\nprint(borrow_book(library_catalog, \"978-0-452-28423-4\", \"Alice\"))\nprint(borrow_book(library_catalog, \"978-0-547-92822-7\", \"Bob\"))\nprint(borrow_book(library_catalog, \"978-0-452-28423-4\", \"Charlie\"))  # Should fail\n\nprint(\"\\n📖 Search Results for 'Pride':\")\nsearch_results = search_books(library_catalog, \"Pride\", \"title\")\nfor book in search_results:\n    status = \"📕 Borrowed\" if book[\"borrowed\"] else \"📗 Available\"\n    print(f\"  {book['title']} by {book['author']} - {status}\")\n\nprint(\"\\n\" + return_book(library_catalog, \"978-0-452-28423-4\"))\n\nprint()\nprint_library_report(library_catalog)",
      "output": "📚 Building Library Catalog...\n  ✅ Added: 1984 by George Orwell\n  ✅ Added: Pride And Prejudice by Jane Austen\n  ✅ Added: The Hobbit by J.R.R. Tolkien\n  ✅ Added: Clean Code by Robert Martin\n\n🔍 Library Operations:\n📚 '1984' borrowed by Alice\n📚 'The Hobbit' borrowed by Bob\n❌ '1984' is already borrowed by Alice\n\n📖 Search Results for 'Pride':\n  Pride And Prejudice by Jane Austen - 📗 Available\n\n📖 '1984' returned by Alice\n\n📚 LIBRARY MANAGEMENT REPORT\n==================================================\nTotal Books: 4\nAvailable: 3 | Borrowed: 1\nBorrowing Rate: 25.0%\n\n📊 Genre Distribution:\n  Dystopian: 1 books\n  Fantasy: 1 books\n  Romance: 1 books\n  Technical: 1 books\n\n🏆 Most Popular Books:\n  1. 1984 - borrowed 1 times\n  2. The Hobbit - borrowed 1 times",
      "explanation": "This comprehensive example demonstrates function composition, data validation, error handling, and complex data processing. Functions work together to create a complete system. We use helper functions, validate inputs, handle edge cases, and separate concerns. The system showcases how functions make complex programs manageable and maintainable.",
      "key_concepts": ["Function composition", "Input validation", "Error handling in functions", "Complex data processing", "System architecture with functions", "Helper functions"]
    }
  },
  "challenges": [
    {
      "prompt": "Create a temperature conversion toolkit:\n- Write three functions: celsius_to_fahrenheit(), fahrenheit_to_celsius(), and describe_temperature()\n- The conversion functions should take a temperature and return the converted value\n- The describe_temperature() function should take a Celsius temperature and return a description:\n  - Below 0: \"Freezing\"\n  - 0-15: \"Cold\"\n  - 16-25: \"Mild\"\n  - 26-35: \"Warm\"\n  - Above 35: \"Hot\"\n- Test with these temperatures: 0, 20, 100 (Celsius)",
      "solution": "def celsius_to_fahrenheit(celsius):\n    \"\"\"Convert Celsius to Fahrenheit.\"\"\"\n    return (celsius * 9/5) + 32\n\ndef fahrenheit_to_celsius(fahrenheit):\n    \"\"\"Convert Fahrenheit to Celsius.\"\"\"\n    return (fahrenheit - 32) * 5/9\n\ndef describe_temperature(celsius):\n    \"\"\"Describe temperature based on Celsius value.\"\"\"\n    if celsius < 0:\n        return \"Freezing\"\n    elif celsius <= 15:\n        return \"Cold\"\n    elif celsius <= 25:\n        return \"Mild\"\n    elif celsius <= 35:\n        return \"Warm\"\n    else:\n        return \"Hot\"\n\n# Test the functions\ntest_temps = [0, 20, 100]\n\nprint(\"🌡️ Temperature Conversion Toolkit\")\nprint(\"=\" * 40)\n\nfor temp_c in test_temps:\n    temp_f = celsius_to_fahrenheit(temp_c)\n    description = describe_temperature(temp_c)\n    \n    print(f\"\\n{temp_c}°C:\")\n    print(f\"  = {temp_f:.1f}°F\")\n    print(f\"  Feels: {description}\")\n    \n    # Test reverse conversion\n    converted_back = fahrenheit_to_celsius(temp_f)\n    print(f\"  Verification: {converted_back:.1f}°C\")",
      "hints": ["Celsius to Fahrenheit: (C × 9/5) + 32", "Fahrenheit to Celsius: (F - 32) × 5/9", "Use if/elif/else for temperature descriptions", "Test your functions with known values"],
      "difficulty": 2
    },
    {
      "prompt": "Build a shopping cart system with functions:\n- create_item(name, price, quantity) - returns item dictionary\n- add_item_to_cart(cart, item) - adds item to cart list\n- calculate_total(cart) - returns total price of all items\n- apply_discount(total, discount_percent) - applies percentage discount\n- print_receipt(cart, total, discount) - prints formatted receipt\n\nCreate a cart with these items: Apple ($1.50, qty 3), Bread ($2.25, qty 1), Milk ($3.00, qty 2)\nApply a 10% discount and print the receipt.",
      "solution": "def create_item(name, price, quantity):\n    \"\"\"Create an item dictionary.\"\"\"\n    return {\n        \"name\": name,\n        \"price\": price,\n        \"quantity\": quantity,\n        \"subtotal\": price * quantity\n    }\n\ndef add_item_to_cart(cart, item):\n    \"\"\"Add an item to the shopping cart.\"\"\"\n    cart.append(item)\n    return cart\n\ndef calculate_total(cart):\n    \"\"\"Calculate total price of all items in cart.\"\"\"\n    return sum(item[\"subtotal\"] for item in cart)\n\ndef apply_discount(total, discount_percent):\n    \"\"\"Apply percentage discount to total.\"\"\"\n    discount_amount = total * (discount_percent / 100)\n    final_total = total - discount_amount\n    return final_total, discount_amount\n\ndef print_receipt(cart, total, discount_percent=0):\n    \"\"\"Print a formatted receipt.\"\"\"\n    print(\"🧾 SHOPPING RECEIPT\")\n    print(\"=\" * 35)\n    \n    for item in cart:\n        print(f\"{item['name']:<12} ${item['price']:.2f} x {item['quantity']:2} = ${item['subtotal']:.2f}\")\n    \n    print(\"-\" * 35)\n    print(f\"{'Subtotal:':<25} ${total:.2f}\")\n    \n    if discount_percent > 0:\n        final_total, discount_amount = apply_discount(total, discount_percent)\n        print(f\"{'Discount (' + str(discount_percent) + '%):':<25} -${discount_amount:.2f}\")\n        print(\"-\" * 35)\n        print(f\"{'TOTAL:':<25} ${final_total:.2f}\")\n    else:\n        print(f\"{'TOTAL:':<25} ${total:.2f}\")\n    \n    print(\"=\" * 35)\n    print(\"Thank you for shopping! 🛒\")\n\n# Build the shopping cart\ncart = []\n\n# Add items\nadd_item_to_cart(cart, create_item(\"Apple\", 1.50, 3))\nadd_item_to_cart(cart, create_item(\"Bread\", 2.25, 1))\nadd_item_to_cart(cart, create_item(\"Milk\", 3.00, 2))\n\n# Calculate total\ntotal = calculate_total(cart)\n\n# Print receipt with 10% discount\nprint_receipt(cart, total, 10)",
      "hints": ["Use dictionaries to represent items", "Use sum() with a generator expression for totals", "Format strings with f-strings and alignment operators", "Functions can call other functions"],
      "difficulty": 3
    }
  ]
}
