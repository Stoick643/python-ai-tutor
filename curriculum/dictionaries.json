{
  "topic_id": "dictionaries",
  "title": "Dictionaries and Key-Value Data", 
  "description": "Learn to work with Python dictionaries for storing and accessing data using keys",
  "difficulty": 3,
  "estimated_time": 25,
  "prerequisites": ["lists"],
  "levels": {
    "0": {
      "type": "concept",
      "content": "Dictionaries store data as key-value pairs, like a real dictionary where words (keys) have definitions (values). Unlike lists that use numeric indices, dictionaries use meaningful keys to access values. They're perfect for representing structured data like user profiles, settings, or any relationship between unique identifiers and their associated data.",
      "explanation": "Dictionaries use curly braces {} with key:value pairs separated by commas. Keys must be immutable (strings, numbers, tuples) and unique, while values can be any type. They're unordered (before Python 3.7) or maintain insertion order (Python 3.7+).",
      "key_concepts": ["Key-value pairs", "Curly brace notation {}", "Unique keys requirement", "Mutable values", "Dictionary methods (.get(), .keys(), .values(), .items())"]
    },
    "1": {
      "type": "simple_example",
      "content": "Let's create and work with a basic student profile dictionary:",
      "code": "# Create a student profile\nstudent = {\n    \"name\": \"Alice Johnson\",\n    \"age\": 20,\n    \"major\": \"Computer Science\",\n    \"gpa\": 3.8,\n    \"graduated\": False\n}\n\nprint(f\"Student Profile:\")\nprint(f\"Name: {student['name']}\")\nprint(f\"Age: {student['age']}\")\nprint(f\"Major: {student['major']}\")\nprint(f\"GPA: {student['gpa']}\")\n\n# Check graduation status\nstatus = \"Graduate\" if student[\"graduated\"] else \"Undergraduate\"\nprint(f\"Status: {status}\")\n\n# Add new information\nstudent[\"email\"] = \"alice@university.edu\"\nprint(f\"\\nEmail added: {student['email']}\")\n\n# Update existing information\nstudent[\"age\"] = 21\nprint(f\"Updated age: {student['age']}\")",
      "output": "Student Profile:\nName: Alice Johnson\nAge: 20\nMajor: Computer Science\nGPA: 3.8\nStatus: Undergraduate\n\nEmail added: alice@university.edu\nUpdated age: 21",
      "explanation": "We create a dictionary with different data types as values. Square brackets access values by key. We can add new key-value pairs or modify existing ones using assignment. Dictionary keys are case-sensitive.",
      "key_concepts": ["Dictionary creation syntax", "Accessing values with keys", "Adding new key-value pairs", "Modifying existing values"]
    },
    "2": {
      "type": "medium_example",
      "content": "Now let's explore dictionary methods and safe access patterns with a word frequency counter:",
      "code": "# Count word frequency in a sentence\ntext = \"python is great python is fun python is powerful\"\nwords = text.split()\n\nword_count = {}\n\n# Count each word\nfor word in words:\n    if word in word_count:\n        word_count[word] += 1\n    else:\n        word_count[word] = 1\n\nprint(\"📊 Word Frequency:\")\nfor word, count in word_count.items():\n    print(f\"{word}: {count}\")\n\n# Alternative method using .get()\nword_count_v2 = {}\nfor word in words:\n    word_count_v2[word] = word_count_v2.get(word, 0) + 1\n\nprint(\"\\n🔍 Dictionary Methods:\")\nprint(f\"All keys: {list(word_count.keys())}\")\nprint(f\"All values: {list(word_count.values())}\")\nprint(f\"Most common word: {max(word_count, key=word_count.get)}\")\n\n# Safe access with .get()\nprint(f\"\\n🛡️ Safe Access:\")\nprint(f\"Count of 'python': {word_count.get('python', 0)}\")\nprint(f\"Count of 'java': {word_count.get('java', 0)}\")\n\n# Check if key exists\nif \"python\" in word_count:\n    print(f\"'python' appears {word_count['python']} times\")",
      "output": "📊 Word Frequency:\npython: 3\nis: 3\ngreat: 1\nfun: 1\npowerful: 1\n\n🔍 Dictionary Methods:\nAll keys: ['python', 'is', 'great', 'fun', 'powerful']\nAll values: [3, 3, 1, 1, 1]\nMost common word: python\n\n🛡️ Safe Access:\nCount of 'python': 3\nCount of 'java': 0\n\n'python' appears 3 times",
      "explanation": "This example shows two ways to count: checking 'if key in dict' or using .get(key, default). The .get() method returns a default value if the key doesn't exist, preventing KeyError. We use .items() to loop through key-value pairs, and max() with a key function to find the most frequent word.",
      "key_concepts": ["Dictionary .get() method", ".keys(), .values(), .items() methods", "'in' operator for key checking", "max() with key parameter"]
    },
    "3": {
      "type": "complex_example",
      "content": "Here's a comprehensive library management system using nested dictionaries and advanced operations:",
      "code": "# Library catalog with nested dictionaries\nlibrary = {\n    \"fiction\": {\n        \"1984\": {\"author\": \"George Orwell\", \"year\": 1949, \"available\": 3, \"rating\": 4.8},\n        \"Pride and Prejudice\": {\"author\": \"Jane Austen\", \"year\": 1813, \"available\": 2, \"rating\": 4.6},\n        \"The Hobbit\": {\"author\": \"J.R.R. Tolkien\", \"year\": 1937, \"available\": 1, \"rating\": 4.9}\n    },\n    \"non-fiction\": {\n        \"Sapiens\": {\"author\": \"Yuval Noah Harari\", \"year\": 2011, \"available\": 4, \"rating\": 4.7},\n        \"The Design of Everyday Things\": {\"author\": \"Don Norman\", \"year\": 1988, \"available\": 2, \"rating\": 4.5}\n    },\n    \"technical\": {\n        \"Clean Code\": {\"author\": \"Robert Martin\", \"year\": 2008, \"available\": 5, \"rating\": 4.6},\n        \"Python Crash Course\": {\"author\": \"Eric Matthes\", \"year\": 2015, \"available\": 3, \"rating\": 4.8}\n    }\n}\n\nprint(\"📚 LIBRARY CATALOG SYSTEM\")\nprint(\"=\" * 60)\n\n# Statistics\ntotal_books = 0\ntotal_copies = 0\nhigh_rated_books = []\navailable_books = []\n\n# Process each category\nfor category, books in library.items():\n    print(f\"\\n📖 {category.upper()} ({len(books)} titles):\")\n    print(\"-\" * 40)\n    \n    for title, details in books.items():\n        total_books += 1\n        total_copies += details[\"available\"]\n        \n        # Format book info\n        author = details[\"author\"]\n        year = details[\"year\"]\n        available = details[\"available\"]\n        rating = details[\"rating\"]\n        \n        # Status indicators\n        availability = \"✅ Available\" if available > 0 else \"❌ Out of Stock\"\n        star_rating = \"⭐\" * int(rating) + f\" ({rating})\"\n        \n        print(f\"  📕 {title}\")\n        print(f\"      by {author} ({year})\")\n        print(f\"      {availability} - {available} copies\")\n        print(f\"      {star_rating}\")\n        print()\n        \n        # Collect data for reports\n        if rating >= 4.7:\n            high_rated_books.append((title, rating, category))\n        if available > 0:\n            available_books.append((title, category, available))\n\n# Generate reports\nprint(\"📊 LIBRARY STATISTICS\")\nprint(\"=\" * 60)\nprint(f\"Total unique titles: {total_books}\")\nprint(f\"Total copies in library: {total_copies}\")\nprint(f\"Categories: {len(library)}\")\n\n# Highest rated books (4.7+)\nif high_rated_books:\n    print(f\"\\n⭐ TOP-RATED BOOKS ({len(high_rated_books)} books):\")\n    sorted_by_rating = sorted(high_rated_books, key=lambda x: x[1], reverse=True)\n    for title, rating, category in sorted_by_rating:\n        print(f\"  • {title} ({rating}⭐) - {category}\")\n\n# Books by availability\nprint(f\"\\n📋 AVAILABILITY SUMMARY:\")\ncategory_totals = {}\nfor category, books in library.items():\n    total_available = sum(book[\"available\"] for book in books.values())\n    category_totals[category] = total_available\n    print(f\"{category.title()}: {total_available} copies available\")\n\n# Find most stocked category\nbest_stocked = max(category_totals, key=category_totals.get)\nprint(f\"\\n🏆 Best stocked category: {best_stocked.title()} ({category_totals[best_stocked]} copies)\")",
      "output": "📚 LIBRARY CATALOG SYSTEM\n============================================================\n\n📖 FICTION (3 titles):\n----------------------------------------\n  📕 1984\n      by George Orwell (1949)\n      ✅ Available - 3 copies\n      ⭐⭐⭐⭐ (4.8)\n\n  📕 Pride and Prejudice\n      by Jane Austen (1813)\n      ✅ Available - 2 copies\n      ⭐⭐⭐⭐ (4.6)\n\n  📕 The Hobbit\n      by J.R.R. Tolkien (1937)\n      ✅ Available - 1 copies\n      ⭐⭐⭐⭐ (4.9)\n\n📖 NON-FICTION (2 titles):\n----------------------------------------\n  📕 Sapiens\n      by Yuval Noah Harari (2011)\n      ✅ Available - 4 copies\n      ⭐⭐⭐⭐ (4.7)\n\n  📕 The Design of Everyday Things\n      by Don Norman (1988)\n      ✅ Available - 2 copies\n      ⭐⭐⭐⭐ (4.5)\n\n📖 TECHNICAL (2 titles):\n----------------------------------------\n  📕 Clean Code\n      by Robert Martin (2008)\n      ✅ Available - 5 copies\n      ⭐⭐⭐⭐ (4.6)\n\n  📕 Python Crash Course\n      by Eric Matthes (2015)\n      ✅ Available - 3 copies\n      ⭐⭐⭐⭐ (4.8)\n\n📊 LIBRARY STATISTICS\n============================================================\nTotal unique titles: 7\nTotal copies in library: 20\nCategories: 3\n\n⭐ TOP-RATED BOOKS (4 books):\n  • The Hobbit (4.9⭐) - fiction\n  • 1984 (4.8⭐) - fiction\n  • Python Crash Course (4.8⭐) - technical\n  • Sapiens (4.7⭐) - non-fiction\n\n📋 AVAILABILITY SUMMARY:\nFiction: 6 copies available\nNon-fiction: 6 copies available\nTechnical: 8 copies available\n\n🏆 Best stocked category: Technical (8 copies)",
      "explanation": "This complex example demonstrates nested dictionaries, multiple data processing patterns, and comprehensive reporting. We use nested loops to access multi-level data, lambda functions for sorting, dictionary comprehensions for aggregation, and max() with key functions to find extremes. The code showcases real-world data management patterns.",
      "key_concepts": ["Nested dictionaries", "Lambda functions", "Dictionary comprehensions", "Data aggregation patterns", "Complex data processing"]
    }
  },
  "challenges": [
    {
      "prompt": "Create a simple grade book program:\n- Start with an empty dictionary called 'grades'\n- Add these students and their scores: 'Alice': 85, 'Bob': 92, 'Charlie': 78, 'Diana': 96\n- Calculate and print the class average\n- Find and print the student with the highest grade\n- Add a new student 'Eve': 88\n- Print the final gradebook in alphabetical order by name",
      "solution": "# Create gradebook\ngrades = {}\n\n# Add students\ngrades['Alice'] = 85\ngrades['Bob'] = 92\ngrades['Charlie'] = 78\ngrades['Diana'] = 96\n\nprint(\"📚 Gradebook Report:\")\nprint(\"-\" * 25)\n\n# Calculate class average\ntotal_score = sum(grades.values())\nclass_average = total_score / len(grades)\nprint(f\"Class average: {class_average:.1f}\")\n\n# Find highest grade\ntop_student = max(grades, key=grades.get)\nprint(f\"Highest grade: {top_student} with {grades[top_student]}\")\n\n# Add new student\ngrades['Eve'] = 88\nprint(f\"Added Eve with grade: {grades['Eve']}\")\n\n# Print in alphabetical order\nprint(\"\\nFinal Gradebook (alphabetical):\")\nfor name in sorted(grades.keys()):\n    print(f\"  {name}: {grades[name]}\")",
      "hints": ["Use sum(dict.values()) to add all values", "Use max(dict, key=dict.get) to find key with highest value", "Use sorted(dict.keys()) to get keys in alphabetical order", "Dictionary assignment: dict[key] = value"],
      "difficulty": 2
    },
    {
      "prompt": "Build a contact directory with phone numbers and emails:\n- Create nested dictionaries for contacts with this structure:\n  contacts = {\n    'John': {'phone': '555-0101', 'email': 'john@email.com'},\n    'Sarah': {'phone': '555-0102', 'email': 'sarah@email.com'}\n  }\n- Add a new contact 'Mike' with phone '555-0103' and email 'mike@email.com'\n- Update John's phone number to '555-9999'\n- Print all contacts in a formatted way\n- Create a function that searches for a contact by name and prints their info",
      "solution": "# Create contact directory\ncontacts = {\n    'John': {'phone': '555-0101', 'email': 'john@email.com'},\n    'Sarah': {'phone': '555-0102', 'email': 'sarah@email.com'}\n}\n\n# Add new contact\ncontacts['Mike'] = {'phone': '555-0103', 'email': 'mike@email.com'}\n\n# Update existing contact\ncontacts['John']['phone'] = '555-9999'\n\n# Print all contacts\nprint(\"📞 CONTACT DIRECTORY\")\nprint(\"=\" * 30)\n\nfor name, info in contacts.items():\n    print(f\"👤 {name}:\")\n    print(f\"  📱 Phone: {info['phone']}\")\n    print(f\"  📧 Email: {info['email']}\")\n    print()\n\n# Search function (simulated)\ndef search_contact(name):\n    if name in contacts:\n        info = contacts[name]\n        print(f\"✅ Found {name}:\")\n        print(f\"  Phone: {info['phone']}\")\n        print(f\"  Email: {info['email']}\")\n    else:\n        print(f\"❌ Contact '{name}' not found\")\n\n# Test search\nprint(\"🔍 Search Results:\")\nsearch_contact('John')\nsearch_contact('David')",
      "hints": ["Access nested values with dict[key1][key2]", "Add nested dictionaries with assignment", "Use .items() to iterate through key-value pairs", "Use 'if key in dict' to check for existence"],
      "difficulty": 3
    }
  ]
}
